<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>셀프 스터디 트레이닝</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1000px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .header p {
            font-size: 1.2em;
            opacity: 0.9;
        }

        .main-content {
            display: flex;
            min-height: 70vh;
        }

        .sidebar {
            width: 300px;
            background: #f8f9fa;
            padding: 20px;
            border-right: 1px solid #e9ecef;
        }

        .content {
            flex: 1;
            padding: 20px;
        }

        .nav-btn {
            width: 100%;
            padding: 15px 20px;
            margin-bottom: 10px;
            background: white;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 16px;
            text-align: left;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .nav-btn:hover {
            border-color: #667eea;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.2);
        }

        .nav-btn.active {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-color: #667eea;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
            animation: fadeIn 0.3s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
        }

        .form-group input,
        .form-group textarea,
        .form-group select {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s ease;
        }

        .form-group input:focus,
        .form-group textarea:focus,
        .form-group select:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .form-group textarea {
            resize: vertical;
            min-height: 120px;
        }

        .btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: all 0.3s ease;
            margin-right: 10px;
            margin-bottom: 10px;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
        }

        .btn-secondary {
            background: #6c757d;
        }

        .btn-danger {
            background: #dc3545;
        }

        .btn-success {
            background: #28a745;
        }

        .question-item {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 15px;
            border-left: 5px solid #667eea;
        }

        .question-item h4 {
            color: #333;
            margin-bottom: 10px;
        }

        .question-item p {
            color: #666;
            margin-bottom: 8px;
        }

        .score-display {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
            padding: 20px;
            border-radius: 15px;
            text-align: center;
            margin-bottom: 20px;
        }

        .score-display h3 {
            font-size: 2em;
            margin-bottom: 10px;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }

        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            text-align: center;
            border-top: 4px solid #667eea;
        }

        .stat-card h3 {
            color: #667eea;
            font-size: 2em;
            margin-bottom: 10px;
        }

        .stat-card p {
            color: #666;
            font-weight: 600;
        }

        .history-item {
            background: white;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 10px;
            border-left: 4px solid #667eea;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        .history-item .date {
            font-weight: 600;
            color: #667eea;
        }

        .history-item .subject {
            font-size: 1.1em;
            margin: 5px 0;
        }

        .history-item .score {
            color: #28a745;
            font-weight: 600;
        }

        .empty-state {
            text-align: center;
            padding: 40px;
            color: #666;
        }

        .empty-state img {
            width: 100px;
            opacity: 0.3;
            margin-bottom: 20px;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 1000;
        }

        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 30px;
            border-radius: 15px;
            max-width: 500px;
            width: 90%;
            box-shadow: 0 20px 40px rgba(0,0,0,0.2);
        }

        .close-modal {
            position: absolute;
            top: 15px;
            right: 20px;
            font-size: 24px;
            cursor: pointer;
            color: #666;
        }

        .alert {
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 15px;
            border-left: 4px solid;
            animation: fadeIn 0.3s ease;
        }

        .alert-success {
            background: #d4edda;
            border-left-color: #28a745;
            color: #155724;
        }

        .alert-info {
            background: #d1ecf1;
            border-left-color: #17a2b8;
            color: #0c5460;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>📚 셀프 스터디 트레이닝</h1>
            <p>매일 공부한 내용을 테스트하고 성장을 기록하세요</p>
        </div>

        <div class="main-content">
            <div class="sidebar">
                <button class="nav-btn active" onclick="showTab('create', this)">
                    ➕ 새 문제 만들기
                </button>
                <button class="nav-btn" onclick="showTab('quiz', this)">
                    🎯 퀴즈 풀기
                </button>
                <button class="nav-btn" onclick="showTab('stats', this)">
                    📊 통계 보기
                </button>
                <button class="nav-btn" onclick="showTab('history', this)">
                    📋 학습 기록
                </button>
                <button class="nav-btn" onclick="showTab('settings', this)">
                    ⚙️ 설정
                </button>
            </div>

            <div class="content">
                <div id="create" class="tab-content active">
                    <h2>새 문제 만들기</h2>
                    <div class="alert alert-info">
                        오늘 공부한 내용에 대한 문제를 만들어보세요. 나중에 스스로 테스트할 수 있습니다.
                    </div>

                    <form id="questionForm">
                        <div class="form-group">
                            <label for="subject">과목명</label>
                            <input type="text" id="subject" placeholder="예: 한국사, 수학, 영어" required>
                        </div>

                        <div class="form-group">
                            <label for="topic">주제/소제목</label>
                            <input type="text" id="topic" placeholder="예: 조선시대 정치제도, 이차방정식" required>
                        </div>

                        <div class="form-group">
                            <label for="question">문제</label>
                            <textarea id="question" placeholder="문제를 입력하세요..." required></textarea>
                        </div>

                        <div class="form-group">
                            <label for="answer">정답</label>
                            <textarea id="answer" placeholder="정답을 입력하세요..." required></textarea>
                        </div>

                        <div class="form-group">
                            <label for="explanation">해설 (선택사항)</label>
                            <textarea id="explanation" placeholder="추가 설명이나 해설을 입력하세요..."></textarea>
                        </div>

                        <button type="submit" class="btn">문제 저장</button>
                        <button type="button" class="btn btn-secondary" onclick="clearForm()">초기화</button>
                    </form>
                </div>

                <div id="quiz" class="tab-content">
                    <h2>퀴즈 풀기</h2>
                    <div id="quizContent"></div>
                </div>

                <div id="stats" class="tab-content">
                    <h2>학습 통계</h2>
                    <div id="statsContent"></div>
                </div>

                <div id="history" class="tab-content">
                    <h2>학습 기록</h2>
                    <div id="historyContent"></div>
                </div>

                <div id="settings" class="tab-content">
                    <h2>설정</h2>
                    <div class="form-group">
                        <label>데이터 관리</label>
                        <button class="btn btn-secondary" onclick="exportData()">데이터 내보내기</button>
                        <button class="btn btn-secondary" onclick="importData()">데이터 가져오기</button>
                        <button class="btn btn-danger" onclick="clearAllData()">모든 데이터 삭제</button>
                    </div>
                    <input type="file" id="importFile" accept=".json" style="display: none;" onchange="handleImport(event)">
                </div>
            </div>
        </div>
    </div>

    <div id="modal" class="modal">
        <div class="modal-content">
            <span class="close-modal" onclick="closeModal()">&times;</span>
            <div id="modalContent"></div>
        </div>
    </div>

    <script>
        // 데이터 저장소
        let questions = JSON.parse(localStorage.getItem('studyQuestions') || '[]');
        let history = JSON.parse(localStorage.getItem('studyHistory') || '[]');
        let currentQuiz = null;
        let currentQuestionIndex = 0;
        let quizResults = [];

        // 탭 전환 함수
        function showTab(tabName, element) {
            // 모든 탭 숨기기
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            document.querySelectorAll('.nav-btn').forEach(btn => {
                btn.classList.remove('active');
            });

            // 선택된 탭 보이기
            document.getElementById(tabName).classList.add('active');
            if (element) {
                element.classList.add('active');
            } else {
                // 해당하는 버튼 찾아서 active 클래스 추가
                const buttons = document.querySelectorAll('.nav-btn');
                buttons.forEach(btn => {
                    if (btn.textContent.includes(getTabName(tabName))) {
                        btn.classList.add('active');
                    }
                });
            }

            // 탭별 데이터 로드
            if (tabName === 'quiz') loadQuizTab();
            else if (tabName === 'stats') loadStatsTab();
            else if (tabName === 'history') loadHistoryTab();
        }

        // 탭 이름 매핑
        function getTabName(tabId) {
            const names = {
                'create': '새 문제 만들기',
                'quiz': '퀴즈 풀기',
                'stats': '통계 보기',
                'history': '학습 기록',
                'settings': '설정'
            };
            return names[tabId] || '';
        }

        // 문제 저장
        document.getElementById('questionForm').addEventListener('submit', function(e) {
            e.preventDefault();

            const questionData = {
                id: Date.now(),
                subject: document.getElementById('subject').value,
                topic: document.getElementById('topic').value,
                question: document.getElementById('question').value,
                answer: document.getElementById('answer').value,
                explanation: document.getElementById('explanation').value,
                createdAt: new Date().toISOString()
            };

            questions.push(questionData);
            localStorage.setItem('studyQuestions', JSON.stringify(questions));

            showAlert('문제가 성공적으로 저장되었습니다!', 'success');
            clearForm();
        });

        // 폼 초기화
        function clearForm() {
            document.getElementById('questionForm').reset();
        }

        // 퀴즈 탭 로드
        function loadQuizTab() {
            const content = document.getElementById('quizContent');

            if (questions.length === 0) {
                content.innerHTML = `
                    <div class="empty-state">
                        <h3>저장된 문제가 없습니다</h3>
                        <p>먼저 "새 문제 만들기" 탭에서 문제를 만들어주세요.</p>
                    </div>
                `;
                return;
            }

            if (!currentQuiz) {
                content.innerHTML = `
                    <div class="alert alert-info">
                        총 ${questions.length}개의 문제가 준비되어 있습니다. 퀴즈를 시작해보세요!
                    </div>
                    <button class="btn" onclick="startQuiz()">퀴즈 시작</button>
                    <button class="btn btn-secondary" onclick="startSubjectQuiz()">과목별 퀴즈</button>
                `;
            }
        }

        // 퀴즈 시작
        function startQuiz() {
            currentQuiz = [...questions].sort(() => Math.random() - 0.5);
            currentQuestionIndex = 0;
            quizResults = [];
            showQuestion();
        }

        // 과목별 퀴즈
        function startSubjectQuiz() {
            const subjects = [...new Set(questions.map(q => q.subject))];
            let modal = `
                <h3>과목 선택</h3>
                <div class="form-group">
                    <select id="subjectSelect">
                        ${subjects.map(s => `<option value="${s}">${s}</option>`).join('')}
                    </select>
                </div>
                <button class="btn" onclick="startSelectedSubjectQuiz()">시작</button>
            `;
            showModal(modal);
        }

        function startSelectedSubjectQuiz() {
            const selectedSubject = document.getElementById('subjectSelect').value;
            currentQuiz = questions.filter(q => q.subject === selectedSubject).sort(() => Math.random() - 0.5);
            currentQuestionIndex = 0;
            quizResults = [];
            closeModal();
            showQuestion();
        }

        // 문제 표시
        function showQuestion() {
            if (currentQuestionIndex >= currentQuiz.length) {
                showResults();
                return;
            }

            const q = currentQuiz[currentQuestionIndex];
            const content = document.getElementById('quizContent');

            content.innerHTML = `
                <div class="score-display">
                    <h3>문제 ${currentQuestionIndex + 1} / ${currentQuiz.length}</h3>
                    <p>${q.subject} - ${q.topic}</p>
                </div>

                <div class="question-item">
                    <h4>문제</h4>
                    <p>${q.question}</p>
                </div>

                <div class="form-group">
                    <label for="userAnswer">답안</label>
                    <textarea id="userAnswer" placeholder="답안을 입력하세요..."></textarea>
                </div>

                <button class="btn" onclick="checkAnswer()">답안 확인</button>
                <button class="btn btn-secondary" onclick="skipQuestion()">건너뛰기</button>
            `;
        }

        // 답안 확인
        function checkAnswer() {
            const userAnswer = document.getElementById('userAnswer').value.trim();
            const correctAnswer = currentQuiz[currentQuestionIndex].answer;

            if (!userAnswer) {
                alert('답안을 입력해주세요.');
                return;
            }

            showAnswerModal(userAnswer, correctAnswer);
        }

        // 답안 모달 표시
        function showAnswerModal(userAnswer, correctAnswer) {
            const q = currentQuiz[currentQuestionIndex];
            let modal = `
                <h3>답안 확인</h3>
                <div class="question-item">
                    <h4>내 답안</h4>
                    <p>${userAnswer}</p>
                </div>
                <div class="question-item">
                    <h4>정답</h4>
                    <p>${correctAnswer}</p>
                </div>
                ${q.explanation ? `<div class="question-item"><h4>해설</h4><p>${q.explanation}</p></div>` : ''}

                <p style="margin: 20px 0;"><strong>스스로 채점해주세요:</strong></p>
                <button class="btn btn-success" onclick="markAnswer(100)">완전히 맞음 (100점)</button>
                <button class="btn" onclick="markAnswer(70)">대부분 맞음 (70점)</button>
                <button class="btn btn-secondary" onclick="markAnswer(30)">부분적으로 맞음 (30점)</button>
                <button class="btn btn-danger" onclick="markAnswer(0)">틀림 (0점)</button>
            `;
            showModal(modal);
        }

        // 답안 채점
        function markAnswer(score) {
            const q = currentQuiz[currentQuestionIndex];
            quizResults.push({
                question: q,
                score: score,
                maxScore: 100
            });

            closeModal();
            currentQuestionIndex++;
            showQuestion();
        }

        // 문제 건너뛰기
        function skipQuestion() {
            const q = currentQuiz[currentQuestionIndex];
            quizResults.push({
                question: q,
                score: 0,
                maxScore: 100,
                skipped: true
            });

            currentQuestionIndex++;
            showQuestion();
        }

        // 결과 표시
        function showResults() {
            const totalScore = quizResults.reduce((sum, r) => sum + r.score, 0);
            const maxScore = quizResults.length * 100;
            const percentage = Math.round((totalScore / maxScore) * 100);

            // 히스토리에 저장
            const testResult = {
                date: new Date().toISOString(),
                subject: currentQuiz[0].subject,
                totalQuestions: quizResults.length,
                totalScore: totalScore,
                maxScore: maxScore,
                percentage: percentage,
                results: quizResults
            };

            history.push(testResult);
            localStorage.setItem('studyHistory', JSON.stringify(history));

            const content = document.getElementById('quizContent');
            content.innerHTML = `
                <div class="score-display">
                    <h3>${percentage}점</h3>
                    <p>${totalScore} / ${maxScore}점</p>
                </div>

                <div class="stats-grid">
                    <div class="stat-card">
                        <h3>${quizResults.length}</h3>
                        <p>총 문제 수</p>
                    </div>
                    <div class="stat-card">
                        <h3>${quizResults.filter(r => r.score >= 70).length}</h3>
                        <p>잘 맞춘 문제</p>
                    </div>
                    <div class="stat-card">
                        <h3>${quizResults.filter(r => r.score < 70).length}</h3>
                        <p>복습 필요</p>
                    </div>
                </div>

                <div style="margin-top: 20px;">
                    <button class="btn" onclick="resetQuiz()">다시 퀴즈</button>
                    <button class="btn btn-secondary" onclick="showTab('stats')">통계 보기</button>
                </div>
            `;

            currentQuiz = null;
        }

        // 퀴즈 리셋
        function resetQuiz() {
            currentQuiz = null;
            loadQuizTab();
        }

        // 통계 탭 로드
        function loadStatsTab() {
            const content = document.getElementById('statsContent');

            if (history.length === 0) {
                content.innerHTML = `
                    <div class="empty-state">
                        <h3>아직 퀴즈 기록이 없습니다</h3>
                        <p>퀴즈를 풀어보시면 통계가 표시됩니다.</p>
                    </div>
                `;
                return;
            }

            const totalTests = history.length;
            const totalQuestions = history.reduce((sum, h) => sum + h.totalQuestions, 0);
            const avgScore = Math.round(history.reduce((sum, h) => sum + h.percentage, 0) / totalTests);
            const recentScore = history[history.length - 1].percentage;

            content.innerHTML = `
                <div class="stats-grid">
                    <div class="stat-card">
                        <h3>${totalTests}</h3>
                        <p>총 테스트 횟수</p>
                    </div>
                    <div class="stat-card">
                        <h3>${totalQuestions}</h3>
                        <p>푼 문제 수</p>
                    </div>
                    <div class="stat-card">
                        <h3>${avgScore}%</h3>
                        <p>평균 점수</p>
                    </div>
                    <div class="stat-card">
                        <h3>${recentScore}%</h3>
                        <p>최근 점수</p>
                    </div>
                </div>

                <div style="margin-top: 30px;">
                    <h3>과목별 통계</h3>
                    <div id="subjectStats"></div>
                </div>
            `;

            // 과목별 통계
            const subjectStats = {};
            history.forEach(h => {
                if (!subjectStats[h.subject]) {
                    subjectStats[h.subject] = { tests: 0, totalScore: 0, questions: 0 };
                }
                subjectStats[h.subject].tests++;
                subjectStats[h.subject].totalScore += h.percentage;
                subjectStats[h.subject].questions += h.totalQuestions;
            });

            const subjectStatsHtml = Object.entries(subjectStats).map(([subject, stats]) => `
                <div class="history-item">
                    <div class="subject">${subject}</div>
                    <p>테스트: ${stats.tests}회 | 평균: ${Math.round(stats.totalScore / stats.tests)}% | 문제: ${stats.questions}개</p>
                </div>
            `).join('');

            document.getElementById('subjectStats').innerHTML = subjectStatsHtml;
        }

        // 히스토리 탭 로드
        function loadHistoryTab() {
            const content = document.getElementById('historyContent');

            if (history.length === 0) {
                content.innerHTML = `
                    <div class="empty-state">
                        <h3>학습 기록이 없습니다</h3>
                        <p>퀴즈를 풀어보시면 기록이 저장됩니다.</p>
                    </div>
                `;
                return;
            }

            const historyHtml = history.slice().reverse().map(h => `
                <div class="history-item">
                    <div class="date">${new Date(h.date).toLocaleDateString('ko-KR')} ${new Date(h.date).toLocaleTimeString('ko-KR')}</div>
                    <div class="subject">${h.subject}</div>
                    <div class="score">${h.percentage}% (${h.totalScore}/${h.maxScore})</div>
                    <p>${h.totalQuestions}문제 중 ${h.results.filter(r => r.score >= 70).length}문제 잘 맞춤</p>
                </div>
            `).join('');

            content.innerHTML = `
                <div style="margin-bottom: 20px;">
                    <button class="btn btn-danger" onclick="clearHistory()">기록 삭제</button>
                </div>
                ${historyHtml}
            `;
        }

        // 기록 삭제
        function clearHistory() {
            if (confirm('모든 학습 기록을 삭제하시겠습니까?')) {
                history = [];
                localStorage.setItem('studyHistory', JSON.stringify(history));
                loadHistoryTab();
                showAlert('학습 기록이 삭제되었습니다.', 'success');
            }
        }

        // 모든 데이터 삭제
        function clearAllData() {
            if (confirm('모든 데이터(문제, 기록)를 삭제하시겠습니까? 이 작업은 되돌릴 수 없습니다.')) {
                questions = [];
                history = [];
                localStorage.removeItem('studyQuestions');
                localStorage.removeItem('studyHistory');
                showAlert('모든 데이터가 삭제되었습니다.', 'success');
                location.reload();
            }
        }

        // 데이터 내보내기
        function exportData() {
            const data = {
                questions: questions,
                history: history,
                exportDate: new Date().toISOString()
            };

            const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `study-data-${new Date().toISOString().split('T')[0]}.json`;
            a.click();
            URL.revokeObjectURL(url);

            showAlert('데이터가 내보내기되었습니다.', 'success');
        }

        // 데이터 가져오기
        function importData() {
            document.getElementById('importFile').click();
        }

        function handleImport(event) {
            const file = event.target.files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const data = JSON.parse(e.target.result);
                    if (data.questions && data.history) {
                        questions = data.questions;
                        history = data.history;
                        localStorage.setItem('studyQuestions', JSON.stringify(questions));
                        localStorage.setItem('studyHistory', JSON.stringify(history));
                        showAlert('데이터가 성공적으로 가져왔습니다.', 'success');
                        location.reload();
                    } else {
                        throw new Error('잘못된 파일 형식입니다.');
                    }
                } catch (error) {
                    alert('파일을 읽는 중 오류가 발생했습니다: ' + error.message);
                }
            };
            reader.readAsText(file);
        }

        // 모달 관련 함수
        function showModal(content) {
            document.getElementById('modalContent').innerHTML = content;
            document.getElementById('modal').style.display = 'block';
        }

        function closeModal() {
            document.getElementById('modal').style.display = 'none';
        }

        // 알림 표시
        function showAlert(message, type = 'info') {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type}`;
            alertDiv.textContent = message;

            const content = document.querySelector('.tab-content.active');
            // 기존에 있던 알림을 제거하여 중복 표시 방지
            const existingAlert = content.querySelector('.alert');
            if (existingAlert) {
                existingAlert.remove();
            }

            content.insertBefore(alertDiv, content.firstChild);

            setTimeout(() => {
                alertDiv.remove();
            }, 3000);
        }

        // 모달 외부 클릭시 닫기
        document.getElementById('modal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeModal();
            }
        });

        // 페이지 로드시 초기화
        document.addEventListener('DOMContentLoaded', function() {
            showTab('create'); // 'create' 탭이 기본으로 활성화되도록 변경
        });
    </script>
</body>
</html>
